name: Create release

on:
  workflow_dispatch:

env:
  FILE_REQ: "req.txt"
  FILE_PY: "abusiv.py"
  NAME_LINUX: "abusiv.tar"
  NAME_WINDOWS: "abusiv.zip"

jobs:
  my-matrix:
    strategy:
      matrix:
        # os: [ubuntu-20.04,windows-2019]
        # os: [ubuntu-20.04]
        os: [windows-2019]

    runs-on: ${{ matrix.os }}
    steps:
    - name: Pull the repo
      uses: actions/checkout@v3

    - name: Setup Python (1)
      uses: actions/setup-python@v3
      with:
        python-version: "3.9.6"
    - name: Setup Python (2)
      run: |
        pip install -r "${{ env.FILE_REQ }}"

    # Windows
    - name: Windows (pyinstaller)
      if: ${{ matrix.os == 'windows-2019' }}
      run: |
        pip install PyInstaller
        python -m PyInstaller --onefile "${{ env.FILE_PY }}"
        Compress-Archive dist "${{ env.NAME_WINDOWS }}"

    # Ubuntu / Linux
#    - name: Linux (pyinstaller)
#      if: ${{ matrix.os == 'ubuntu-20.04' }}
#      run: |
#        pip install pyinstaller
#        pyinstaller --onefile "${{ env.FILE_PY }}"
#        tar -cvf "${{ env.NAME_LINUX }}" dist

    # Create release
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        tag_name: "abusiv"
        release_name: "abusiv"
        draft: false
        prerelease: false

    - name: Windows (Upload Release Asset)
      if: ${{ matrix.os == 'windows-2019' }}
      id: ura-windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: "${{ env.NAME_WINDOWS }}"
        asset_name: "${{ env.NAME_WINDOWS }}"
        asset_content_type: application/octet-stream

#    - name: Ubuntu / Linux (Upload Release Asset)
#      if: ${{ matrix.os == 'ubuntu-20.04' }}
#      id: ura-linux
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }}
#        asset_path: "${{ env.NAME_LINUX }}"
#        asset_name: "${{ env.NAME_LINUX }}"
#        asset_content_type: application/octet-stream
